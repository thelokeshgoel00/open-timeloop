#!/bin/bash

# Local Development Setup for E5 Model Deployment
# This script handles the parts that cannot be automated in GitHub Actions

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}🔧 Setting up local development environment for E5 model deployment${NC}"

# Check if running in supported environment
if [[ "$OSTYPE" != "linux-gnu"* ]]; then
    echo -e "${YELLOW}⚠️  Warning: This script is optimized for Ubuntu 20.04 LTS${NC}"
    echo -e "   You may need to adapt commands for your OS"
fi

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Check prerequisites
echo -e "\n${BLUE}📋 Checking prerequisites...${NC}"

# Check for adb
if ! command_exists adb; then
    echo -e "${RED}❌ ADB not found${NC}"
    echo -e "   Install Android Debug Bridge:"
    echo -e "   ${YELLOW}sudo apt-get install android-tools-adb android-tools-fastboot${NC}"
    exit 1
else
    echo -e "${GREEN}✅ ADB found${NC}"
fi

# Check for Python
if ! command_exists python3; then
    echo -e "${RED}❌ Python 3 not found${NC}"
    exit 1
else
    echo -e "${GREEN}✅ Python 3 found${NC}"
fi

# Check for connected Android devices
echo -e "\n${BLUE}📱 Checking for connected Android devices...${NC}"
adb devices -l > /tmp/adb_devices.txt

if grep -q "device" /tmp/adb_devices.txt; then
    echo -e "${GREEN}✅ Android device(s) detected:${NC}"
    cat /tmp/adb_devices.txt | grep "device" | while read line; do
        echo -e "   ${GREEN}📱 $line${NC}"
    done
else
    echo -e "${YELLOW}⚠️  No Android devices detected${NC}"
    echo -e "   Please:"
    echo -e "   1. Connect your Android device via USB"
    echo -e "   2. Enable Developer Options"
    echo -e "   3. Enable USB Debugging"
    echo -e "   4. Accept the debugging authorization on your device"
    echo -e "\n   Then run: ${YELLOW}adb devices${NC}"
fi

# Check for Qualcomm SDK
echo -e "\n${BLUE}🔍 Checking for Qualcomm AI Engine Direct SDK...${NC}"

SDK_PATHS=(
    "$HOME/qualcomm/qnn"
    "/opt/qcom/aistack/qnn"
    "/usr/local/qnn"
    "$QNN_SDK_ROOT"
)

SDK_FOUND=false
for path in "${SDK_PATHS[@]}"; do
    if [[ -n "$path" && -d "$path" ]]; then
        echo -e "${GREEN}✅ QNN SDK found at: $path${NC}"
        export QNN_SDK_ROOT="$path"
        SDK_FOUND=true
        break
    fi
done

if [[ "$SDK_FOUND" == false ]]; then
    echo -e "${RED}❌ Qualcomm AI Engine Direct SDK not found${NC}"
    echo -e "\n${YELLOW}📥 Manual Download Required:${NC}"
    echo -e "   1. Visit: https://qpm.qualcomm.com/main/tools/details/qualcomm_ai_engine_direct"
    echo -e "   2. Register/Login with Qualcomm account"
    echo -e "   3. Accept license agreement"
    echo -e "   4. Download SDK v2.12.0 or newer"
    echo -e "   5. Extract to one of these locations:"
    for path in "${SDK_PATHS[@]:0:3}"; do
        echo -e "      - $path"
    done
    echo -e "   6. Or set QNN_SDK_ROOT environment variable"
    echo -e "\n   ${BLUE}Alternative: Use our download helper${NC}"
    echo -e "   ${YELLOW}./scripts/download_qnn_sdk.sh${NC}"
fi

# Download GitHub Actions artifacts if available
echo -e "\n${BLUE}📦 Checking for pre-built model artifacts...${NC}"

if command_exists gh; then
    echo -e "${GREEN}✅ GitHub CLI found${NC}"
    echo -e "   You can download pre-built models using:"
    echo -e "   ${YELLOW}gh run download --pattern 'e5-model-deployment-*'${NC}"
else
    echo -e "${YELLOW}⚠️  GitHub CLI not found${NC}"
    echo -e "   Install it to easily download pre-built artifacts:"
    echo -e "   ${YELLOW}curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg${NC}"
    echo -e "   ${YELLOW}echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null${NC}"
    echo -e "   ${YELLOW}sudo apt update && sudo apt install gh${NC}"
fi

# Create local configuration
echo -e "\n${BLUE}⚙️  Creating local configuration...${NC}"

cat > .env.local << EOF
# Local Environment Configuration
# Generated by setup_local_dev.sh

# Qualcomm SDK Path
QNN_SDK_ROOT=${QNN_SDK_ROOT:-/path/to/qnn-sdk}

# Device Configuration
TARGET_DEVICE=auto  # or specific device ID from 'adb devices'

# Model Configuration
MODEL_PATH=./models/e5_model_quantized.pte
QUANTIZATION_TYPE=int8

# Performance Settings
ENABLE_PROFILING=true
BENCHMARK_ITERATIONS=100

# Logging
LOG_LEVEL=INFO
VERBOSE_OUTPUT=true
EOF

echo -e "${GREEN}✅ Created .env.local configuration file${NC}"

# Create quick deployment script
cat > deploy_local.sh << 'EOF'
#!/bin/bash

# Quick local deployment script
# Source environment variables
if [[ -f .env.local ]]; then
    source .env.local
fi

echo "🚀 Starting local deployment..."

# Check if model exists locally or download from GitHub Actions
if [[ ! -f "$MODEL_PATH" ]]; then
    echo "📦 Model not found locally. Checking for artifacts..."
    if command -v gh >/dev/null 2>&1; then
        gh run download --pattern 'e5-model-deployment-*' || echo "⚠️  No artifacts found, you may need to build locally"
    else
        echo "❌ Model not found and GitHub CLI not available"
        echo "   Either build the model locally or install gh CLI to download artifacts"
        exit 1
    fi
fi

# Run deployment
./scripts/deploy_model.sh \
    --device "$TARGET_DEVICE" \
    --model_path "$MODEL_PATH" \
    --sdk_path "$QNN_SDK_ROOT" \
    --quantization_type "$QUANTIZATION_TYPE"

echo "✅ Local deployment completed!"
EOF

chmod +x deploy_local.sh
echo -e "${GREEN}✅ Created deploy_local.sh quick deployment script${NC}"

# Create VS Code configuration for development
mkdir -p .vscode
cat > .vscode/settings.json << EOF
{
    "python.defaultInterpreterPath": "./venv/bin/python",
    "python.linting.enabled": true,
    "python.linting.flake8Enabled": true,
    "python.formatting.provider": "black",
    "files.associations": {
        "*.pte": "plaintext"
    },
    "terminal.integrated.env.linux": {
        "QNN_SDK_ROOT": "${QNN_SDK_ROOT:-/path/to/qnn-sdk}",
        "PYTHONPATH": "\${workspaceFolder}:\${env:PYTHONPATH}"
    }
}
EOF

echo -e "${GREEN}✅ Created VS Code configuration${NC}"

# Final summary
echo -e "\n${GREEN}🎉 Local development setup complete!${NC}"
echo -e "\n${BLUE}Next Steps:${NC}"
echo -e "1. ${YELLOW}Download Qualcomm SDK manually if not found${NC}"
echo -e "2. ${YELLOW}Connect your Android device with SM8650 chipset${NC}"
echo -e "3. ${YELLOW}Run GitHub Actions to build the model OR build locally${NC}"
echo -e "4. ${YELLOW}Use ./deploy_local.sh for quick deployment${NC}"

echo -e "\n${BLUE}Development Workflow:${NC}"
echo -e "📋 ${YELLOW}GitHub Actions${NC} → Model building, testing, artifacts"
echo -e "📱 ${YELLOW}Local Environment${NC} → Device deployment, on-device testing"

echo -e "\n${BLUE}Useful Commands:${NC}"
echo -e "• Check devices: ${YELLOW}adb devices${NC}"
echo -e "• Download artifacts: ${YELLOW}gh run download${NC}"
echo -e "• Quick deploy: ${YELLOW}./deploy_local.sh${NC}"
echo -e "• Manual deploy: ${YELLOW}./scripts/deploy_model.sh --help${NC}"

if [[ "$SDK_FOUND" == false ]]; then
    echo -e "\n${RED}⚠️  IMPORTANT: You still need to download the Qualcomm SDK manually${NC}"
fi 